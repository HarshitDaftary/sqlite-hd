package require sqlite3
set dbs {}
for {set i 1} {$i <= 10} {incr i} {
	sqlite3 db$i :memory:
	lappend dbs db$i
}
[lindex $dbs 0] eval {CREATE TABLE IF NOT EXISTS queue(id INTEGER PRIMARY KEY, value TEXT);}
[lindex $dbs 0] eval {CREATE TABLE IF NOT EXISTS queue(id INTEGER PRIMARY KEY, value TEXT);}
# High-load queue test: simulate 10 consumers using separate SQLite connections
package require sqlite3
set dbs {}
for {set i 1} {$i <= 10} {incr i} {
	sqlite3 db$i :memory:
	lappend dbs db$i
}

# Create queue table in db1
[lindex $dbs 0] eval {
	CREATE TABLE queue(id INTEGER PRIMARY KEY, value TEXT);
}

# Each consumer inserts, reads, updates, and deletes their own item
for {set i 1} {$i <= 10} {incr i} {
	set db [lindex $dbs [expr {$i-1}]]
	$db eval "INSERT INTO queue(value) VALUES('item${i}')"
	set rowid [$db eval "SELECT last_insert_rowid()"]
	set val [$db eval "SELECT value FROM queue WHERE id=$rowid"]
	$db eval "UPDATE queue SET value='item${i}_updated' WHERE id=$rowid"
	set val2 [$db eval "SELECT value FROM queue WHERE id=$rowid"]
	$db eval "DELETE FROM queue WHERE id=$rowid"
	set exists [$db eval "SELECT count(*) FROM queue WHERE id=$rowid"]
	if {$exists != 0} {
		puts "Delete error for consumer $i"
	}
}

# Final check: queue should be empty
set final_count [[lindex $dbs 0] eval "SELECT count(*) FROM queue"]
puts "Final queue count: $final_count (should be 0)"

# Close all connections
foreach db $dbs {
	$db close
}



# High-load queue test: 10,000 consumers performing read, write, update, and delete operations
package require sqlite3
sqlite3 db :memory:

# Create queue table
db eval {
	CREATE TABLE queue(id INTEGER PRIMARY KEY, value TEXT);
}

# Simulate 10,000 consumers
for {set i 1} {$i <= 10000} {incr i} {
	# Write: Each consumer inserts an item and get the rowid
	db eval "INSERT INTO queue(value) VALUES('item${i}')"
	set rowid [db eval "SELECT last_insert_rowid()"]

	# Read: Each consumer reads the item they just inserted
	set val [db eval "SELECT value FROM queue WHERE id=$rowid"]
	if {$val ne "item${i}"} {
		puts "Read error for consumer $i: got $val"
	}

	# Update: Each consumer updates their item
	db eval "UPDATE queue SET value='item${i}_updated' WHERE id=$rowid"
	set val2 [db eval "SELECT value FROM queue WHERE id=$rowid"]
	if {$val2 ne "item${i}_updated"} {
		puts "Update error for consumer $i: got $val2"
	}

	# Delete: Each consumer deletes their item
	db eval "DELETE FROM queue WHERE id=$rowid"
	set exists [db eval "SELECT count(*) FROM queue WHERE id=$rowid"]
	if {$exists != 0} {
		puts "Delete error for consumer $i"
	}
}

# Final check: queue should be empty
set final_count [db eval "SELECT count(*) FROM queue"]
puts "Final queue count: $final_count (should be 0)"

db close
