# Deterministic test to exercise writer lock vs concurrent insert
package require sqlite3

set dbfile "test_queue_det.db"
file delete -force $dbfile
sqlite3 master $dbfile
master eval {CREATE TABLE IF NOT EXISTS queue(id INTEGER PRIMARY KEY, payload TEXT);}
master close

# Start deterministic writer that acquires write lock and holds it for 2 seconds
set holdsecs 2
set writer_cmd "tclsh test/queue_deterministic_writer.tcl $dbfile $holdsecs &"
puts "Starting writer (holds lock for $holdsecs s): $writer_cmd"
exec sh -c $writer_cmd
# Give writer a small moment to acquire lock
after 200

# Run the worker that will attempt to insert immediately
set worker_cmd "tclsh test/queue_deterministic_worker.tcl $dbfile"
puts "Running worker: $worker_cmd"
set out [catch {exec sh -c $worker_cmd} res]
if {$out == 0} {
    puts "Worker process exit 0: $res"
} else {
    puts "Worker process non-zero: $res"
}

# Wait for writer to finish
while {[file exists "test/queue_det_writer.running"]} {after 50}

# Final inspect
sqlite3 vdb $dbfile
set final_count [vdb eval "SELECT count(*) FROM queue"]
puts "Final queue count: $final_count"
vdb close
file delete -force $dbfile
puts "Deterministic test done"
exit 0
